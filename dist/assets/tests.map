{"version":3,"sources":["test-model-frameworks/tests/app.jshint.js","test-model-frameworks/tests/controllers/application.jshint.js","test-model-frameworks/tests/helpers/destroy-app.js","test-model-frameworks/tests/helpers/destroy-app.jshint.js","test-model-frameworks/tests/helpers/module-for-acceptance.js","test-model-frameworks/tests/helpers/module-for-acceptance.jshint.js","test-model-frameworks/tests/helpers/resolver.js","test-model-frameworks/tests/helpers/resolver.jshint.js","test-model-frameworks/tests/helpers/start-app.js","test-model-frameworks/tests/helpers/start-app.jshint.js","test-model-frameworks/tests/models/ember-data.jshint.js","test-model-frameworks/tests/models/ember-model.jshint.js","test-model-frameworks/tests/resolver.jshint.js","test-model-frameworks/tests/router.jshint.js","test-model-frameworks/tests/routes/application.jshint.js","test-model-frameworks/tests/test-helper.js","test-model-frameworks/tests/test-helper.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('test-model-frameworks/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass jshint.\\napp.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 4, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 6, col 1, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 13, col 3, \\'object short notation\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 18, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n7 errors');\n  });\n});","define('test-model-frameworks/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass jshint.\\ncontrollers/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 6, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 8, col 22, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 14, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 15, col 5, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 17, col 5, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 18, col 10, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 34, col 5, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 38, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 39, col 5, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 41, col 5, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 42, col 10, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 58, col 5, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 63, col 5, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 64, col 5, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 71, col 14, \\'template literal syntax\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 73, col 14, \\'template literal syntax\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 78, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 82, col 9, Missing semicolon.\\n\\n20 errors');\n  });\n});","define('test-model-frameworks/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('test-model-frameworks/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('test-model-frameworks/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'test-model-frameworks/tests/helpers/start-app', 'test-model-frameworks/tests/helpers/destroy-app'], function (exports, _qunit, _testModelFrameworksTestsHelpersStartApp, _testModelFrameworksTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _testModelFrameworksTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _testModelFrameworksTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('test-model-frameworks/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('test-model-frameworks/tests/helpers/resolver', ['exports', 'test-model-frameworks/resolver', 'test-model-frameworks/config/environment'], function (exports, _testModelFrameworksResolver, _testModelFrameworksConfigEnvironment) {\n\n  var resolver = _testModelFrameworksResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _testModelFrameworksConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _testModelFrameworksConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('test-model-frameworks/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('test-model-frameworks/tests/helpers/start-app', ['exports', 'ember', 'test-model-frameworks/app', 'test-model-frameworks/config/environment'], function (exports, _ember, _testModelFrameworksApp, _testModelFrameworksConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _testModelFrameworksConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _testModelFrameworksApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('test-model-frameworks/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('test-model-frameworks/tests/models/ember-data.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-data.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/ember-data.js should pass jshint.\\nmodels/ember-data.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/ember-data.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('test-model-frameworks/tests/models/ember-model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-model.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/ember-model.js should pass jshint.\\nmodels/ember-model.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/ember-model.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('test-model-frameworks/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'resolver.js should pass jshint.\\nresolver.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nresolver.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('test-model-frameworks/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass jshint.\\nrouter.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nrouter.js: line 11, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('test-model-frameworks/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass jshint.\\nroutes/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/application.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/application.js: line 4, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/application.js: line 6, col 17, \\'spread/rest operator\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('test-model-frameworks/tests/test-helper', ['exports', 'test-model-frameworks/tests/helpers/resolver', 'ember-qunit'], function (exports, _testModelFrameworksTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_testModelFrameworksTestsHelpersResolver['default']);\n});","define('test-model-frameworks/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('test-model-frameworks/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}